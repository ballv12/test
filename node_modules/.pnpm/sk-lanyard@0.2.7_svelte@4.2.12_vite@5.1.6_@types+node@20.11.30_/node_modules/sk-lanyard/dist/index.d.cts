import { Readable } from 'svelte/store';

interface LanyardConfigRest {
    restUrl?: string;
    method: 'rest';
    id: string;
    pollInterval?: number;
}
interface LanyardConfigOne {
    wsUrl?: string;
    method: 'ws';
    id: string;
}
interface LanyardConfigMany {
    wsUrl?: string;
    method: 'ws';
    ids: string[];
}
interface LanyardConfigAll {
    wsUrl?: string;
    method: 'ws';
    all: true;
}
type LanyardConfigWS = LanyardConfigOne | LanyardConfigMany | LanyardConfigAll;
type LanyardConfig = LanyardConfigRest | LanyardConfigWS;

interface LanyardSuccessResponse {
    success: true;
    data: LanyardData;
}
interface LanyardErrorResponse {
    success: false;
    error: LanyardError;
}
type LanyardResponse = LanyardSuccessResponse | LanyardErrorResponse;
interface LanyardError {
    message: string;
    code: string;
}
interface LanyardData {
    active_on_discord_mobile: boolean;
    active_on_discord_desktop: boolean;
    listening_to_spotify: boolean;
    kv: KV;
    spotify: Spotify;
    discord_user: DiscordUser;
    discord_status: string;
    activities: Activity[];
}
interface Emoji {
    name: string;
    id: string;
    animated: boolean;
}
interface Activity {
    type: number;
    timestamps: Timestamps;
    sync_id?: string;
    state: string;
    session_id?: string;
    party?: Party;
    name: string;
    id: string;
    emoji?: Emoji;
    flags?: number;
    details: string;
    created_at: number;
    assets: Assets;
    application_id?: string;
}
interface Assets {
    large_text: string;
    large_image: string;
    small_text?: string;
    small_image?: string;
}
interface Party {
    id: string;
}
interface Timestamps {
    start: number;
    end?: number;
}
interface DiscordUser {
    username: string;
    global_name: string;
    discriminator: string;
    display_name: string;
    public_flags: number;
    id: string;
    avatar: string;
    bot: boolean;
}
interface KV {
    location: string;
}
interface Spotify {
    track_id: string;
    timestamps: Timestamps;
    song: string;
    artist: string;
    album_art_url: string;
    album: string;
}

declare enum LanyardOpcode {
    EVENT = 0,
    HELLO = 1,
    INITIALIZE = 2,
    HEARTBEAT = 3
}
type LanyardEventType = 'INIT_STATE' | 'PRESENCE_UPDATE';
type InitState = LanyardData | Record<string, LanyardData>;
type PresenceUpdate = LanyardData | (LanyardData & {
    user_id: string;
});
type LanyardEvents = {
    INIT_STATE: InitState;
    PRESENCE_UPDATE: PresenceUpdate;
};
interface LanyardMessage<T> {
    op: LanyardOpcode;
    seq?: number;
    t?: LanyardEventType;
    d: T;
}
interface LanyardEvent<T extends LanyardEventType> extends LanyardMessage<LanyardEvents[T]> {
    op: LanyardOpcode.EVENT;
    seq: number;
    t: LanyardEventType;
}
interface LanyardHelloData {
    heartbeat_interval: number;
}
interface LanyardHello extends LanyardMessage<LanyardHelloData> {
    op: LanyardOpcode.HELLO;
    seq?: never;
    t?: never;
}
interface LanyardInitializeOne {
    subscribe_to_id: string;
    subscribe_to_ids?: never;
    subscribe_to_all?: never;
}
interface LanyardInitializeMany {
    subscribe_to_id?: never;
    subscribe_to_ids: string[];
    subscribe_to_all?: never;
}
interface LanyardInitializeAll {
    subscribe_to_id?: never;
    subscribe_to_ids?: never;
    subscribe_to_all: boolean;
}
type LanyardInitializeData = LanyardInitializeOne | LanyardInitializeMany | LanyardInitializeAll;
interface LanyardInitialize extends LanyardMessage<LanyardInitializeData> {
    op: LanyardOpcode.INITIALIZE;
    seq?: never;
    t?: never;
}
interface LanyardHeartbeat extends LanyardMessage<undefined> {
    op: LanyardOpcode.HEARTBEAT;
    seq?: never;
    t?: never;
}

declare function useLanyard(config: LanyardConfigMany | LanyardConfigAll): Readable<Record<string, LanyardData>>;
declare function useLanyard(config: LanyardConfigRest | LanyardConfigOne): Readable<LanyardData>;

export { Activity, Assets, DiscordUser, Emoji, InitState, KV, LanyardConfig, LanyardConfigAll, LanyardConfigMany, LanyardConfigOne, LanyardConfigRest, LanyardConfigWS, LanyardData, LanyardError, LanyardErrorResponse, LanyardEvent, LanyardEventType, LanyardEvents, LanyardHeartbeat, LanyardHello, LanyardHelloData, LanyardInitialize, LanyardInitializeAll, LanyardInitializeData, LanyardInitializeMany, LanyardInitializeOne, LanyardMessage, LanyardOpcode, LanyardResponse, LanyardSuccessResponse, Party, PresenceUpdate, Spotify, Timestamps, useLanyard };
